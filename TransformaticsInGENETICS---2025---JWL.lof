\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {1.1}{\ignorespaces In the course of writing this work, an experiment to grow pineapples from the pineapple fruit tops of pineapples normally bought from nearby marketplace (\textbf {Garuga/Bugabo-Bukaaya}) yielded results! Here we see the first successful harvest of a pineapple from our home garden (at \textbf {Nuchwezi Research}). But also, this case inspired part of the discussion in \textbf {Chapter \ref {SEC4}} about how in real genome expression systems, the organism expressed from genetic code somewhat still includes the genetic code in the manifested organism as some kind of affix --- a prefix (in leaves for example) or suffix (roots), from which the original organism (or the same exact genome) might be later reproduced!}}{3}{figure.caption.6}%
\contentsline {figure}{\numberline {1.2}{\ignorespaces A basic diagram of the chemical structure of DNA base-pairs from \cite {wikipedia_basepair}}}{5}{figure.caption.7}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {6.1}{\ignorespaces Some proposal to use G$\ddot {o}$del's idea of abstracting formulae such as formal symbolic sequences using distinct natural numbers.}}{45}{figure.caption.11}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {8.1}{\ignorespaces An illustration of the gene translation process in a cell via protein-factories known as ribosomes\cite {geeksforgeeks2024protein}}}{57}{figure.caption.12}%
\contentsline {figure}{\numberline {8.2}{\ignorespaces \textbf {Flow-Chart summarizing the Ribosome-based Protein-Synthesis Process in a Living Cell}}}{63}{figure.caption.15}%
\contentsline {figure}{\numberline {8.3}{\ignorespaces \textbf {The RIBOSOME State Machine}}}{64}{figure.caption.16}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {9.1}{\ignorespaces The OZIN Cipher\cite {lutalo_2025_ozin}, a mapping from Decimal Symbols (our base-$\Omega $) to Symbols for Intermediate Genetic Code.}}{71}{figure.caption.17}%
\contentsline {figure}{\numberline {9.2}{\ignorespaces The equivalent OZIN expression of the hypothetical Euler Virus genome sequence.}}{72}{figure.caption.18}%
\contentsline {figure}{\numberline {9.3}{\ignorespaces The equivalent OZIN expression of the HiFinelle genome sequence.}}{72}{figure.caption.19}%
\contentsline {figure}{\numberline {9.4}{\ignorespaces The equivalent OZIN expression of the $\Omega _{3}$ genome sequence.}}{73}{figure.caption.20}%
\contentsline {figure}{\numberline {9.5}{\ignorespaces The palindromic sequence $\Omega _{pal}$ transcribed into base-OZ.}}{74}{figure.caption.21}%
\contentsline {figure}{\numberline {9.6}{\ignorespaces The PLATONIC Cipher\cite {lutalo_2025_platonic} a mapping from Decimal Symbols (our base-$\Omega $) to Spatial-Geometric Forms ($\psi _{pf}$).}}{77}{figure.caption.22}%
\contentsline {figure}{\numberline {9.7}{\ignorespaces An example of a single \textbf {amino-acid}-equivalent segment in the \textbf {LGES} system's \textbf {PFA} component, this one corresponding to a rendering of the configuration \textbf {$4_{pf} \otimes 6_{oz}$} = \textbf {$4_{pf} + 4 \times 6_{oz}$}.}}{80}{figure.caption.23}%
\contentsline {figure}{\numberline {9.8}{\ignorespaces The equivalent LGES complete genome expression of the $\Omega _{3}$ genome sequence (from \textbf {Equation \ref {EQDNEXA}})}}{82}{figure.caption.24}%
\contentsline {figure}{\numberline {9.9}{\ignorespaces The equivalent LGES complete genome expression of the $\Omega _{veuler}$ (Euler Virus) genome sequence (from \textbf {Equation \ref {EQGFEEVIRUS}})}}{83}{figure.caption.25}%
\contentsline {figure}{\numberline {9.10}{\ignorespaces The \textbf {alternative rendering} of the same sequence as $\Omega _{veuler}$.}}{84}{figure.caption.26}%
\contentsline {figure}{\numberline {9.11}{\ignorespaces The \textbf {x-LGES form rendering} of the $\Omega _{veuler}$, the \textbf {Euler Virus}, now with HEAD, BODY and ROOT segments.}}{88}{figure.caption.27}%
\contentsline {figure}{\numberline {9.12}{\ignorespaces An example of an actual organism from nature --- an Earthworm, for which, like the x-LGES rendering of the sequence $\Omega _{HiFinelle}$, results in a genome expression for a creature that almost looks the same at the HEAD and ROOT. Image sourced from Wikimedia Commons\cite {earthwormImage}.}}{93}{figure.caption.28}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {A.1}{\ignorespaces An excerpt from architectural design notes by the author from early days of his home-based research laboratory. In this note, we also get to see an idea similar to how gene expressions are actually a chain of glyphs that, as in our \textbf {LGES} protocols, are depicted as structures chained to each other along a \textit {backbone structure} symbolically depicted as a line (curved lines in this case). Copyrights due to author and Nuchwezi Research Labs.}}{102}{figure.caption.29}%
\contentsline {figure}{\numberline {A.2}{\ignorespaces The OZIN Cipher in use. An excerpt from the Church of Dance Eternal OGF}}{104}{figure.caption.30}%
\contentsline {figure}{\numberline {A.3}{\ignorespaces The OZIN Cipher in use. An excerpt from author's research notes (circa 2019) on developing a cryptographic system leveraging a dial mechanism. Copyrights due to author and Nuchwezi Research Labs.}}{105}{figure.caption.31}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {C.1}{\ignorespaces A Tabulation Trace of Shuffling the Base-10 n-SSI Sequence with increasing values of $k$, the \textbf {Initial Partitioning Index} for \textbf {\hyperref [ALGLUSHUFFLEA]{Algorithm \ref {ALGLUSHUFFLEA}}}, the \textbf {First Lu-Shuffle Algorithm}.}}{112}{figure.caption.34}%
\contentsline {figure}{\numberline {C.2}{\ignorespaces A Tabulation Trace of Shuffling the na-Sequence $\Theta _{2na}$ from \textbf {\hyperref [EQDUPLNASEQ]{Equation \ref {EQDUPLNASEQ}}} with \textbf {\hyperref [ALGLUSHUFFLEA]{Algorithm \ref {ALGLUSHUFFLEA}}}.}}{113}{figure.caption.35}%
\contentsline {figure}{\numberline {C.3}{\ignorespaces A Tabulation Trace of Shuffling the na-Sequence $\Theta _{palna}$ from \textbf {\hyperref [EQPALNASEQ]{Equation \ref {EQPALNASEQ}}} with \textbf {\hyperref [ALGLUSHUFFLEA]{Algorithm \ref {ALGLUSHUFFLEA}}}.}}{113}{figure.caption.36}%
\contentsline {figure}{\numberline {C.4}{\ignorespaces The First Lu-Shuffle Algorithm implemented using Python}}{114}{figure.caption.37}%
\contentsline {figure}{\numberline {C.5}{\ignorespaces A Tabulation Trace of Shuffling the Base-10 n-SSI Sequence with increasing values of $k$, using \textbf {\hyperref [ALGLUSHUFFLEB]{Algorithm \ref {ALGLUSHUFFLEB}}}, the \textbf {Second Lu-Shuffle Algorithm}.}}{116}{figure.caption.40}%
\contentsline {figure}{\numberline {C.6}{\ignorespaces A Tabulation Trace of Shuffling the na-Sequence $\Theta _{2na}$ from \textbf {\hyperref [EQDUPLNASEQ]{Equation \ref {EQDUPLNASEQ}}} with \textbf {\hyperref [ALGLUSHUFFLEB]{Algorithm \ref {ALGLUSHUFFLEB}}}.}}{116}{figure.caption.41}%
\contentsline {figure}{\numberline {C.7}{\ignorespaces A Tabulation Trace of Shuffling the na-Sequence $\Theta _{palna}$ from \textbf {\hyperref [EQPALNASEQ]{Equation \ref {EQPALNASEQ}}} with \textbf {\hyperref [ALGLUSHUFFLEB]{Algorithm \ref {ALGLUSHUFFLEB}}}.}}{117}{figure.caption.42}%
\contentsline {figure}{\numberline {C.8}{\ignorespaces The Second Lu-Shuffle Algorithm implemented using Python}}{118}{figure.caption.43}%
\contentsline {figure}{\numberline {C.9}{\ignorespaces The \textbf {USYMBOLSET}$(\Omega )$ unspecific symbol set generator implemented using Python}}{120}{figure.caption.46}%
\contentsline {figure}{\numberline {C.10}{\ignorespaces The \textbf {PROTRACT}$(\psi _y, 2x)$ sequence generator-transformer implemented using Python}}{121}{figure.caption.48}%
\contentsline {figure}{\numberline {C.11}{\ignorespaces The \textbf {RNG}$(ll,ul)$ random number generator implemented using Python}}{122}{figure.caption.50}%
\contentsline {figure}{\numberline {C.12}{\ignorespaces A text dump from testing our RNG$(ll,ul)$ that only utilizes System Time as entropy source, and uses our First Lu-Shuffle Algorithm to generate True Random Numbers}}{123}{figure.caption.51}%
\contentsline {figure}{\numberline {C.13}{\ignorespaces The \textbf {SHUFFLE}$(\Theta )$ sequence randomizer implemented using Python}}{124}{figure.caption.53}%
\contentsline {figure}{\numberline {C.14}{\ignorespaces The \textbf {SELECT}$(n,\Theta )$ sequence sampler function implemented using Python}}{125}{figure.caption.55}%
\contentsline {figure}{\numberline {C.15}{\ignorespaces The \textbf {RSG}$(n,\Theta )$ random sequence generator function implemented using Python}}{126}{figure.caption.57}%
\contentsline {figure}{\numberline {C.16}{\ignorespaces A Random DNA Sequence of exactly 200 random codons as generated using our \textbf {RSG}$(n,\Theta )$ random sequence generator algorithm.}}{127}{figure.caption.58}%
